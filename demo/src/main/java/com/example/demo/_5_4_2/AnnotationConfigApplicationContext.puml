@startuml
class AnnotationConfigApplicationContext{
   AnnotatedBeanDefinitionReader reader
   ClassPathBeanDefinitionScanner scanner
}
AnnotatedBeanDefinitionReader <-- AnnotationConfigApplicationContext
ClassPathBeanDefinitionScanner <-- AnnotationConfigApplicationContext
GenericApplicationContext <|-- AnnotationConfigApplicationContext
AnnotationConfigRegistry <|-- AnnotationConfigApplicationContext

interface AnnotationConfigRegistry

class GenericApplicationContext{
 DefaultListableBeanFactory beanFactory
}
AbstractApplicationContext <|-- GenericApplicationContext
BeanDefinitionRegistry <|-- GenericApplicationContext
DefaultListableBeanFactory <-- GenericApplicationContext

abstract AbstractApplicationContext
DefaultResourceLoader <|-- AbstractApplicationContext
ConfigurableApplicationContext <|-- AbstractApplicationContext

interface ConfigurableApplicationContext
ApplicationContext <|-- ConfigurableApplicationContext
Lifecycle <|-- ConfigurableApplicationContext

interface Lifecycle

interface ApplicationContext
EnvironmentCapable <|-- ApplicationContext
ListableBeanFactory <|-- ApplicationContext
HierarchicalBeanFactory <|-- ApplicationContext
MessageSource <|-- ApplicationContext
ApplicationEventPublisher <|-- ApplicationContext
ResourcePatternResolver <|-- ApplicationContext

interface EnvironmentCapable
interface MessageSource
interface ApplicationEventPublisher
interface ResourcePatternResolver
ResourceLoader <|-- ResourcePatternResolver

class DefaultResourceLoader{
 ClassLoader classLoader
}
ClassLoader <.. DefaultResourceLoader
ResourceLoader <|-- DefaultResourceLoader
abstract ClassLoader

interface ResourceLoader

class DefaultListableBeanFactory
AbstractAutowireCapableBeanFactory <|-- DefaultListableBeanFactory
ConfigurableListableBeanFactory <|-- DefaultListableBeanFactory
BeanDefinitionRegistry <|-- DefaultListableBeanFactory

interface ConfigurableListableBeanFactory
ListableBeanFactory <|-- ConfigurableListableBeanFactory
AutowireCapableBeanFactory <|-- ConfigurableListableBeanFactory
ConfigurableBeanFactory <|-- ConfigurableListableBeanFactory

interface ListableBeanFactory{
+boolean containsBeanDefinition(String beanName)
+int getBeanDefinitionCount()
+String[] getBeanDefinitionNames()
+<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType, boolean allowEagerInit)
+<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType, boolean allowEagerInit)
+String[] getBeanNamesForType(ResolvableType type)
+String[] getBeanNamesForType(ResolvableType type, boolean includeNonSingletons, boolean allowEagerInit)
+String[] getBeanNamesForType(@Nullable Class<?> type)
+String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)
+String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)
+<T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException
+<T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) throws BeansException
+String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)
+Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException
+<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) throws NoSuchBeanDefinitionException
}
BeanFactory <|-- ListableBeanFactory
note left of ListableBeanFactory
BeanFactory接口的扩展将由可以枚举其所有bean实例的bean工厂实现，而不是按客户的要求
按名称一一尝试进行bean查找。预先加载了所有他们的bean definitions(
例如基于XML的工厂)的BeanFactory的实现可能实这个接口。
如果它是一个HierarchicalBeanFactory,则返不考虑任何BeanFactory层次结构，而
仅与当前工厂中定义的bean有关。也可以使用BeanFactoryUtils帮助器类来考虑祖先工厂
中的bean。
在这个接口中的方法仅代表这个工厂中的bean definitions。他们将忽略通过其他方式（
例如org.springframework.beans.factory.config.ConfigurableBeanFactory的
registerSingleton方法）注册的任何单例bean，但getBeanNamesForType和getBeansOfType除外，
他们也将检查此类手动注册的单例。当然，BeanFactory的getBean也允许透明地访问此类特殊的bean。
但是，在典型情况下，无论如何，所有bean都将由外部bean definitions定，因此，大多数应用程序
不需要担心这种区别。
注意：除了除了getBeanDefinitionCount和containsBeanDefinition之外，此接口中的方法并非设计用于频繁调用。
调用他的实现可能会很慢。
end note
note right of ListableBeanFactory::containsBeanDefinition
检查这个工厂是否包含指定名称的bean definition。
不考虑该工厂可能参与的任何层次结构，并且将忽略通过bean definitions以外的其他方式注册的任何
单例bean。
end note
note right of ListableBeanFactory::getBeanDefinitionCount
返回工中bean定义的数量。
不考虑该工厂可能参与的任何层次结构，并且将忽略通过bean definitions以外的其他方式注册的任何
单例bean。
end note
note right of ListableBeanFactory::getBeanDefinitionNames
返回该工厂中定义的所有bean的名字。
不考虑该工厂可能参与的任何层次结构，并且将忽略通过bean definitions以外的其他方式注册的任何
单例bean。
end note
note right of ListableBeanFactory::"getBeanProvider(Class<T> requiredType, boolean allowEagerInit)"
返回指定bean的provider，以允许按需延迟检索实例，包括可用性和唯一性选项
end note
note right of ListableBeanFactory::"getBeanProvider(ResolvableType requiredType, boolean allowEagerInit)"
返回指定bean的provider，以允许按需延迟检索实例，包括可用性和唯一性选项
end note
note right of ListableBeanFactory::"getBeanNamesForType(ResolvableType type)"
根据Factory Beans的bean定义或getObjectType的值判断，
返回与给定类型（包括子类）匹配的bean的名称。
注意：这个方法仅自省顶级bean。它不检查可能也与指定类型匹配的嵌套bean。
是否考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans。
如果由FactoryBean创建的对象不匹配，则原始FactoryBean本身将与该类型匹配。
不考虑该工厂可能参与的任何层次结构。
也可以使用BeanFactoryUtils的beanNamesForTypeIncludedAncestors
在祖先工厂中包括bean。
注意：不要忽略通过bean定义以外的其他方式注册的单例bean。
此版本的getBeanNamesForType匹配所有类型的bean，无论是单例，
原型还是FactoryBeans。 在大多数实现中，结果将与
getBeanNamesForType（type，true，true）相同。
此方法返回的Bean名称应始终尽可能按后端配置中定义的顺序返回Bean名称。
end note
note right of ListableBeanFactory::"getBeanNamesForType(ResolvableType type, boolean includeNonSingletons, boolean allowEagerInit)"
返回指定类型（包括超类）的beans的名称，根据FactoryBeans中的bean definitions或getObjectType来判断。
注意：该方法只内省顶级beans。不会检查那些可能匹配特殊类型的嵌套bean。
如果设置了“ allowEagerInit”标志，是否考虑了FactoryBeans创建的对象，
这意味着将初始化FactoryBeans。 如果由FactoryBean创建的对象不匹配，
则原始FactoryBean本身将与该类型匹配。如果未设置“ allowEagerInit”，
则仅检查原始FactoryBeans（不需要初始化每个FactoryBean）。
不考虑该工厂可能参与的任何层次结构。也可以使用BeanFactoryUtils的beanNamesForTypeIncludedAncestors。
end note
note right of ListableBeanFactory::"getBeanNamesForType(@Nullable Class<?> type)"
根据指定类型（包含超类），返回beans的名称。根据Factory Beans的bean定义或getObjectType的值判断。
end note


abstract AbstractAutowireCapableBeanFactory
AbstractBeanFactory <|-- AbstractAutowireCapableBeanFactory
AutowireCapableBeanFactory <|-- AbstractAutowireCapableBeanFactory

interface AutowireCapableBeanFactory
BeanFactory <|-- AutowireCapableBeanFactory

abstract AbstractBeanFactory{
    BeanFactory parentBeanFactory
}
FactoryBeanRegistrySupport <|-- AbstractBeanFactory
ConfigurableBeanFactory <|-- AbstractBeanFactory
BeanFactory <.. AbstractBeanFactory

interface ConfigurableBeanFactory{
+String SCOPE_SINGLETON = "singleton"
+String SCOPE_PROTOTYPE = "prototype"
+void setParentBeanFactory(BeanFactory parentBeanFactory) throws IllegalStateException
+void setBeanClassLoader(@Nullable ClassLoader beanClassLoader)
+ClassLoader getBeanClassLoader()
+void setTempClassLoader(@Nullable ClassLoader tempClassLoader)
+ClassLoader getTempClassLoader()
+void setCacheBeanMetadata(boolean cacheBeanMetadata)
+boolean isCacheBeanMetadata()
+void setBeanExpressionResolver(@Nullable BeanExpressionResolver resolver)
+BeanExpressionResolver getBeanExpressionResolver()
+void setConversionService(@Nullable ConversionService conversionService)
+ConversionService getConversionService()
+void addPropertyEditorRegistrar(PropertyEditorRegistrar registrar)
+void registerCustomEditor(Class<?> requiredType, Class<? extends PropertyEditor> propertyEditorClass)
+void copyRegisteredEditorsTo(PropertyEditorRegistry registry)
+void setTypeConverter(TypeConverter typeConverter)
+TypeConverter getTypeConverter()
+void addEmbeddedValueResolver(StringValueResolver valueResolver)
+boolean hasEmbeddedValueResolver()
+String resolveEmbeddedValue(String value)
+void addBeanPostProcessor(BeanPostProcessor beanPostProcessor)
+int getBeanPostProcessorCount()
+void registerScope(String scopeName, Scope scope)
+String[] getRegisteredScopeNames()
+Scope getRegisteredScope(String scopeName)
+void setApplicationStartup(ApplicationStartup applicationStartup)
+ApplicationStartup getApplicationStartup()
+AccessControlContext getAccessControlContext()
+void copyConfigurationFrom(ConfigurableBeanFactory otherFactory)
+void registerAlias(String beanName, String alias) throws BeanDefinitionStoreException
+void resolveAliases(StringValueResolver valueResolver)
+BeanDefinition getMergedBeanDefinition(String beanName) throws NoSuchBeanDefinitionException
+boolean isFactoryBean(String name) throws NoSuchBeanDefinitionException
+void setCurrentlyInCreation(String beanName, boolean inCreation)
+boolean isCurrentlyInCreation(String beanName)
+void registerDependentBean(String beanName, String dependentBeanName)
+String[] getDependentBeans(String beanName)
+String[] getDependenciesForBean(String beanName)
+void destroyBean(String beanName, Object beanInstance)
+void destroyScopedBean(String beanName)
+void destroySingletons()
}
HierarchicalBeanFactory <|-- ConfigurableBeanFactory
SingletonBeanRegistry <|-- ConfigurableBeanFactory
note left of ConfigurableBeanFactory
大多数bean factories需要实现的配置接口。
除了BeanFactory接口中的bean factory客
户端方法外，还提供了用于配置bean factory的工具。

这个bean factory接口不适合在常规
应用程序代码中使用：如果需要，直接使用
BeanFactory或org.springframework.beans.factory.ListableBeanFactory。
此扩展接口仅用于在框架内部进行即插即用，
并允许对bean factory配置方法进行
特殊访问。
end note
note right of ConfigurableBeanFactory::SCOPE_SINGLETON
标准单例作用域的标识符：singleton
可通过registerScope来添加自定义作用域
end note
note right of ConfigurableBeanFactory::SCOPE_PROTOTYPE
标准原型作用域的标识符：prototype
可通过registerScope来添加自定义作用域
end note
note right of ConfigurableBeanFactory::"setParentBeanFactory(BeanFactory parentBeanFactory)"
设置此bean factory的父工厂
注意：父工厂不能改变：如果在实例化工厂时不可用，
则只能在构造函数外部设置
end note
note right of ConfigurableBeanFactory::"setBeanClassLoader(@Nullable ClassLoader beanClassLoader)"
设置class loader，用来加载bean class。
默认为线程上下文的class loader。
注意：这个class loader只能应用于bean definitions，
它不能用来解析bean class。这是在Spring2.0中
默认的情况：Bean definitions只能承载bean class names，
工厂负责处理bean definition。
end note
note right of ConfigurableBeanFactory::getBeanClassLoader
返回用来加载bean classes的工厂的class loader
（如果系统ClassLoader不可访问，仅返回null）。
end note
note right of ConfigurableBeanFactory::setTempClassLoader
指定一个临时的ClassLoader，用作类型匹配。
缺省值为没有，仅使用标准的bean ClassLoader。

如果涉及到加载时织入，通常指定一个临时的
ClassLoader，以确保实际的bean尽可能地
延迟加载。BeanFactory完成其引导阶段
后，变回删除临时加载程序。
end note
note right of ConfigurableBeanFactory::getTempClassLoader
返回用来类型匹配的临时ClassLoader
end note
note right of ConfigurableBeanFactory::setCacheBeanMetadata
设置是否缓存指定的bean definitions的元数据
和已解析的bean classes。默认开启此选项-on。

将此标志位设置为off,可以开启bean definition的对象
热刷新，特别是bean classes。如果关闭了这个标志位，
任何bean实例的创建将会重新查询bean class loader，
以获取解析的类。
end note
note right of ConfigurableBeanFactory::isCacheBeanMetadata
返回是否缓存bean元数据
end note
note right of ConfigurableBeanFactory::setBeanExpressionResolver
为在bean definitions中的表达式指定解析策略
默认情况下，在BeanFactory中不支持任何表达式。
一个ApplicationContext通常在这里会设置一个
标准的表达式策略，以统一EL兼容样式支持
"#{}"表达式。
end note
note right of ConfigurableBeanFactory::getBeanExpressionResolver
返回表达式解析策略
end note
note right of ConfigurableBeanFactory::setConversionService
指定用来转换属性值的JavaBeans PropertyEditors的替代
end note
note right of ConfigurableBeanFactory::getConversionService
获取关联的ConversionService
end note
note right of ConfigurableBeanFactory::addPropertyEditorRegistrar
增加一个PropertyEditorRegistrar，应用于所有
bean的创建过程。
end note
note right of ConfigurableBeanFactory::registerCustomEditor
为指定类型的所有属性注册一个自定义的
属性编辑器。在工厂配置时调用。

注意：这个方法注册了一个共享的自定义
编辑器；访问线程安全的访问实例，
需要同步操作。通常，使用addPropertyEditorRegistrar
来代替这个方法更合适，避免的客户端编辑器
上的同步操作。
end note
note right of ConfigurableBeanFactory::copyRegisteredEditorsTo
初始化在此BeanFactory中注册的自定义编辑器
end note
note right of ConfigurableBeanFactory::setTypeConverter
为BeanFactory设置自定义的类型转换器，
用来转换bean属性值，构造器参数等。
这会覆盖默认的PropertyEditor机制，并且
使任何自定义编辑器或自定义编辑器注册器都不相关。
end note
note right of ConfigurableBeanFactory::getTypeConverter
通过BeanFactory获取一个类型转换器。对于每次调用，
可能都是一个新的实例，因为TypeConverter通常
不是线程安全的。

如果默认的PropertyEditor机制被激活，
则返回的TypeConverter将知道所有已注册的
自定义编辑器。
end note
note right of ConfigurableBeanFactory::addEmbeddedValueResolver
为内嵌的值添加一个字符串解析器，例如annotation attributes。
end note
note right of ConfigurableBeanFactory::hasEmbeddedValueResolver
在这个bean factory中是否有一个已经注册的解析器。
end note
note right of ConfigurableBeanFactory::resolveEmbeddedValue
解析指定内嵌的值，例如annotation的attribute。
end note
note right of ConfigurableBeanFactory::addBeanPostProcessor
增加一个BeanPostProcessor，应用于通过
工厂创建的bean。在工厂配置期间调用该方法。

注意：Post-processor将按照注册的顺序应用；
任何通过org.springframework.core.Ordered接口
实现的语义都将被忽略。注意，自动检测到的post-processors(例如，可以作为
ApplicationContext中的bean)始终在以编程方式注册post-processors的后边。
end note
note right of ConfigurableBeanFactory::getBeanPostProcessorCount
返回当前已注册的BeanPostProcessors的数量
end note
note right of ConfigurableBeanFactory::registerScope
注册一个指定的作用域，由指定作用域的实现提供支持
end note
note right of ConfigurableBeanFactory::getRegisteredScopeNames
返回当前已经注册的作用域。

这仅仅会返回显示注册的作用域。内置的作用域：
例如singleton和property将不会返回。
end note
note right of ConfigurableBeanFactory::getRegisteredScope
返回指定作用域名字的所用于实现。

这仅仅会返回明确注册的作用域。内置的作用域，例如singleton和property将不会返回。
end note
note right of ConfigurableBeanFactory::setApplicationStartup
为此bean factory，设置ApplicationStartup
这允许应用程序上下文在应用程序启动时，
记录度量。
end note
note right of ConfigurableBeanFactory::getApplicationStartup
返回此bean factory的ApplicationStartup
end note
note right of ConfigurableBeanFactory::getAccessControlContext
为此工厂，提供一个相关的安全访问控制上下文。
end note
note right of ConfigurableBeanFactory::copyConfigurationFrom
从指定的其他工厂中，拷贝所有相关的配置。
end note
note right of ConfigurableBeanFactory::registerAlias
为指定的bean name创建一个别名。通常使用
这个方法来支持那些在XML中的非法ids。
end note
note right of ConfigurableBeanFactory::resolveAliases
通过指定StringValueResolver，解析工厂中已注册的别名
end note
note right of ConfigurableBeanFactory::getMergedBeanDefinition
返回指定bean name的合并后的BeanDefinition，
如果需要，将合并父子bean definition。这里也
考虑到了在祖先工厂中定义的bean definition。
end note
note right of ConfigurableBeanFactory::isFactoryBean
通过指定名称，来判断是否是一个FactoryBean
end note
note right of ConfigurableBeanFactory::setCurrentlyInCreation
明确控制指定bean的当前增量状态。仅供
容器内部使用。
end note
note right of ConfigurableBeanFactory::isCurrentlyInCreation
指定bean当前是否在创建中
end note
note right of ConfigurableBeanFactory::registerDependentBean
为指定bean注册一个依赖bean，在指定bean被销毁之前，销毁依赖的bean
end note
note right of ConfigurableBeanFactory::getDependentBeans
返回依赖于指定bean的所有bean的名称。
end note
note right of ConfigurableBeanFactory::getDependenciesForBean
返回指定bean依赖的所有bean的名称
end note
note right of ConfigurableBeanFactory::destroyBean
根据bean definition，销毁指定bean实例(通常，是从
该工厂获得的原型实例)。
在销毁期间产生的任何异常都应该
被捕获并且用日志记录来代替传播
给调用者。
end note
note right of ConfigurableBeanFactory::destroyScopedBean
在当前目标作用域上销毁特定
作用域的bean。
end note
note right of ConfigurableBeanFactory::destroySingletons
销毁工厂中的所有单例bean，包括已注册的
内部bean。
end note


interface HierarchicalBeanFactory{
+BeanFactory getParentBeanFactory()
+boolean containsLocalBean(String name)
}
BeanFactory <|-- HierarchicalBeanFactory
note left of HierarchicalBeanFactory
通过bean factories 实现的子接口，是层级关系的一部分
对于bean factories来说，在ConfigurableBeanFactory接口中
相应的setParentBeanFactory方法允许以配置的形式设置父工厂。
end note
note right of HierarchicalBeanFactory::getParentBeanFactory
返回父bean factory，如果没有，就返回null
end note
note right of HierarchicalBeanFactory::containsLocalBean
返回本地bean factory是否包含指定名称的bean，忽略在祖先上下文中的
bean定义。
这是containsBean的替代方法，忽略了从祖先工厂的指定名称的bean。
end note

interface BeanFactory{
+String FACTORY_BEAN_PREFIX = "&";
+Object getBean(String name) throws BeansException
+<T> T getBean(String name, Class<T> requiredType) throws BeansException
+Object getBean(String name, Object... args) throws BeansException
+<T> T getBean(Class<T> requiredType) throws BeansException
+<T> T getBean(Class<T> requiredType, Object... args) throws BeansException
+<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)
+<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)
+boolean containsBean(String name)
+boolean isSingleton(String name) throws NoSuchBeanDefinitionException
+boolean isPrototype(String name) throws NoSuchBeanDefinitionException
+boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException
+Class<?> getType(String name) throws NoSuchBeanDefinitionException
+Class<?> getType(String name, boolean allowFactoryBeanInit) throws NoSuchBeanDefinitionException
+String[] getAliases(String name)
}
note right of BeanFactory::FACTORY_BEAN_PREFIX
用来取消引用FactoryBean实例，并且将其与FactoryBean创建的
bean区分开来
end note
note right of BeanFactory::"getBean(String name)"
返回特定bean的实例，这个实例可能是一个共享的或独立的。
这个方法允许使用一个Spring BeanFactory来替代单例或原型设计模式。
对于单例bean，调用者可以保留对返回对象的引用。

将别名转换为相应规范的bean name

如果在这个工厂实例中没有找到bean，将会向parent factory请求。
end note
note right of BeanFactory::"getBean(String name, Class<T> requiredType)"
与getBean(String)的行为一样，但是如果bean不是要求的类型，则通过抛出
BeanNotOfRequiredTypeException来提供类型安全性的度量。这意味着在正确地结果转换
中，不会抛出ClassCastException，但是getBean(String)会抛出这个异常。
end note
note right of BeanFactory::"getBean(String name, Object... args)"
允许指定明确的构造器参数或工厂方法参数，来覆盖在bean definition中默认的参数
end note
note right of BeanFactory::"getBean(Class<T> requiredType)"
返回通过指定对象的类型的唯一bean实例。
该方法进入ListableBeanFactory,按类型范围查找，但也可以根据给定类的名称
转换为常规的按名称查找。对于跨bean集的更广泛的检索操作，请使用该方法进入ListableBeanFactory
和/或BeanFactoryUtils
end note
note right of BeanFactory::"getBean(Class<T> requiredType, Object... args)"
允许指定构造器参数/工厂方法参数来覆盖默认参数
end note
note right of BeanFactory::"getBeanProvider(Class<T> requiredType)"
为特定bean提供一个provider，以允许按需延迟检索实例，包括可用性和唯一性选项
end note
note right of BeanFactory::"getBeanProvider(ResolvableType requiredType)"
requiredType-bean必须匹配的类型；可以是一个泛型类型声明。注意，与反射性注入点相比，
此处不支持集合类型。为了以编程方式检索与特定类型匹配的bean列表，请在此处指定实际
bean类型作为参数，然后使用ObjectProvicer.orderedStream()或他的延迟流/迭代选项。
end note
note right of BeanFactory::containsBean
这个bean factory是否包含指定名称的bean definition或外部注册的单例实例？
如果指定名称是一个别名，它将会在被转换为规范的bean name。
如果这个工厂是hierarchical，如果没有找到bean，则将向parent factory询问
end note
note right of BeanFactory::isSingleton
这个bean是共享单例吗？也就是说，getBean总是返回相同实例吗？
注意：这个方法返回false，没有清楚地表明它是一个独立实例。它表明了这是一个非单例实例，
也可以对应于作用域bean。使用isPrototype操作来明确地检查独立实例。
end note
note right of BeanFactory::isPrototype
这个bean实例是一个prototype吗？也就是说，getBean总是返回独立的实例？
注意：这个方法返回false，没有清楚的表示它是一个非独立实例，它也可以对应于作用域bean。
使用isSingleton操作来明确地检查共享单例实例。
end note
note right of BeanFactory::isTypeMatch
end note
note right of BeanFactory::getType
返回指定名称的bean类型
end note
note right of BeanFactory::"getType(String name, boolean allowFactoryBeanInit)"
返回指定名称的bean类型。
end note
note right of BeanFactory::getAliases
返回指定bean名称的别名
end note
note left of BeanFactory
访问一个Spring bean容器的root接口
这是一个bean容器的基础客户端视图；
诸如ListableBeanFactory、ConfigurableBeanFactory之类的
接口可用于特殊的目的。
此接口由包含许多bean definitions的对象实现，每个bean definition都
由一个String名称唯一标识。根据bean definition，工厂
将返回所包含对象的独立实例（Prototype设计模式）或单个共享实例（Singleton设置模式
的替代方案，其中实例是作用域工厂中的单例）。返回实例的类型
依赖于bean factory的配置：API是相同的。

该方法的重点是，BeanFactory是应用程序组件的中心注册表，
并且集中了应用程序组件的配置（不再需要单个对象读取属性文件）

需要注意的是，最好依靠依赖注入（"push"配置）通过setters或构造器
配置应用程序对象，而不是使用任何形式的"pull"配置例如BeanFactory lookup。
Spring的依赖注入功能是使用此接口及子接口实现的。

通常，一个BeanFactory会载入存储在配置源（例如一个XML文档）中的bean definitions，
并且使用org.springframework.beans包来配置bean。但是，实现可以
根据需要直接在Java代码中返回它创建的对象。这里没有限制bean definitions
保存的形式：LDAP,RDBMS,XML,properties文件等等。鼓励实现支持bean
之间的引用（依赖注入）。

与ListableBeanFactory中的方法相比，这个接口里所有的方法会检查
parent factories，如果这是一个HierarchicalBeanFactory。如果
在工厂实例中未找到bean，parent factory会立即被询问。在这个工厂
实例中的bean，支持覆盖在任何parent factory中具有相同名字的bean。

Bean factory的实现应尽可能地支持标准bean声明周期接口。全套初始化
方法及其标准顺序是：
1.BeanNameAware's setBeanName
2.BeanNameAware's setBeanName
3.BeanNameAware's setBeanName
4.EnvironmentAware's setEnvironment
5.EmbeddedValueResolverAware's setEmbeddedValueResolver
6.ResourceLoaderAware's setResourceLoader (only applicable when running in an application context)
7.ApplicationEventPublisherAware's setApplicationEventPublisher (only applicable when running in an application context)
8.MessageSourceAware's setMessageSource (only applicable when running in an application context)
9.ApplicationContextAware's setApplicationContext (only applicable when running in an application context)
10.ServletContextAware's setServletContext (only applicable when running in a web application context)
11.postProcessBeforeInitialization methods of BeanPostProcessors
12.InitializingBean's afterPropertiesSet
13.a custom init-method definition
14.postProcessAfterInitialization methods of BeanPostProcessors

在bean factory关闭时，以下声明周期方法适用：
1.postProcessBeforeDestruction methods of DestructionAwareBeanPostProcessors
2.DisposableBean's destroy
3.a custom destroy-method definition
end note

abstract FactoryBeanRegistrySupport{
-final Map<String, Object> factoryBeanObjectCache = new ConcurrentHashMap<>(16)
#Class<?> getTypeForFactoryBean(FactoryBean<?> factoryBean)
#Object getCachedObjectForFactoryBean(String beanName)
#Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess)
#Object doGetObjectFromFactoryBean(FactoryBean<?> factory, String beanName) throws BeanCreationException
#bject postProcessObjectFromFactoryBean(Object object, String beanName) throws BeansException
#FactoryBean<?> getFactoryBean(String beanName, Object beanInstance) throws BeansException
#protected void removeSingleton(String beanName)
#protected void clearSingletonCache()
#AccessControlContext getAccessControlContext()
}
DefaultSingletonBeanRegistry <|-- FactoryBeanRegistrySupport
note left of FactoryBeanRegistrySupport
支持需要处理FactoryBean实例的单例注册表的基类，集成了DefaultSingletonBeanRegistry的
单例管理功能
end note
note right of FactoryBeanRegistrySupport::factoryBeanObjectCache
缓存通过FactoryBean创建的对象：FactoryBean name到对象的映射
end note
note right of FactoryBeanRegistrySupport::"getTypeForFactoryBean(FactoryBean<?> factoryBean)"
确定指定FactoryBean的类型
end note
note right of FactoryBeanRegistrySupport::"getCachedObjectForFactoryBean(String beanName)"
用指定的FactoryBean，从缓存中获取对象。
end note
note right of FactoryBeanRegistrySupport::getObjectFromFactoryBean
用指定的FactoryBean获取一个对象
end note
note right of FactoryBeanRegistrySupport::doGetObjectFromFactoryBean
用指定的FactoryBean获取一个对象
end note
note right of FactoryBeanRegistrySupport::postProcessObjectFromFactoryBean
对从指定FactoryBean获取的对象进行后处理。将结果暴露给bean引用。
end note
note right of FactoryBeanRegistrySupport::getFactoryBean
如果可能，根据指定bean获取一个FactoryBean
end note
note right of FactoryBeanRegistrySupport::removeSingleton
覆盖了清除FactoryBean对象缓存
end note
note right of FactoryBeanRegistrySupport::clearSingletonCache
覆盖了清除FactoryBean对象缓存
end note
note right of FactoryBeanRegistrySupport::getAccessControlContext
返回这个bean factory的安全的上下文。
end note

class DefaultSingletonBeanRegistry{
-static final int SUPPRESSED_EXCEPTIONS_LIMIT = 100
-final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256)
-final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16)
-final Map<String, Object> earlySingletonObjects = new ConcurrentHashMap<>(16)
-final Set<String> registeredSingletons = new LinkedHashSet<>(256)
-final Set<String> singletonsCurrentlyInCreation = Collections.newSetFromMap(new ConcurrentHashMap<>(16))
-final Set<String> inCreationCheckExclusions = Collections.newSetFromMap(new ConcurrentHashMap<>(16))
-Set<Exception> suppressedExceptions
-boolean singletonsCurrentlyInDestruction = false
-final Map<String, Object> disposableBeans = new LinkedHashMap<>()
-final Map<String, Set<String>> containedBeanMap = new ConcurrentHashMap<>(16)
-final Map<String, Set<String>> dependentBeanMap = new ConcurrentHashMap<>(64)
-final Map<String, Set<String>> dependenciesForBeanMap = new ConcurrentHashMap<>(64)
}
SimpleAliasRegistry <|-- DefaultSingletonBeanRegistry
SingletonBeanRegistry <|-- DefaultSingletonBeanRegistry
note left of DefaultSingletonBeanRegistry
共享bean实例的通用注册表，实现了SingletonBeanRegistry。
允许注册单例实例，所有注册表的调用通过bean名称这都应该共享该实例。
为了在注册表关闭时销毁bean，也支持DisposableBean实例的注册，（可能与已注册的单例相对应，也可能不对应）。
这个类主要作为org.springframework.beans.factory.BeanFactory实现的基类，
从而排除了单例bean实例的常见管理。注意，org.springframework.beans.factory.config.ConfigurableBeanFactory
接口扩展了SingletonBeanRegistry接口。
注意，与AbstractBeanFactory和DefaultListableBeanFactory(从其继承)相比，
此类既不假设bean definition定义概念也不为bean实例指定创建过程。可以作为
委托的嵌套帮助器。
end note
note right of DefaultSingletonBeanRegistry::SUPPRESSED_EXCEPTIONS_LIMIT
保留的最大异常数
end note
note right of DefaultSingletonBeanRegistry::singletonObject
缓存单例对象，bean name到bean实例的映射
end note
note right of DefaultSingletonBeanRegistry::singletonFactories
缓存单例工厂；bean name到ObjectFactory的映射
end note
note right of DefaultSingletonBeanRegistry::earlySingletonObjects
缓存单例对象；bean name到bean实例的映射
end note
note right of DefaultSingletonBeanRegistry::registeredSingletons
已注册单例的集合，包括按顺序注册的bean names。
end note
note right of DefaultSingletonBeanRegistry::singletonsCurrentlyInCreation
当前正在创建的bean name的集合
end note
note right of DefaultSingletonBeanRegistry::inCreationCheckExclusions
当前从创建检查中排除的bean names
end note
note right of DefaultSingletonBeanRegistry::suppressedExceptions
异常集合，用于关联相关原因
end note
note right of DefaultSingletonBeanRegistry::singletonsCurrentlyInDestruction
指示是否在destroySingletons中的标志位
end note
note right of DefaultSingletonBeanRegistry::disposableBeans
一次性bean实例；bean name到一次性实例的映射
end note
note right of DefaultSingletonBeanRegistry::containedBeanMap
bean名称包含bean名称集的映射
end note
note right of DefaultSingletonBeanRegistry::dependentBeanMap
bean名称依赖bean名称集的映射
end note
note right of DefaultSingletonBeanRegistry::dependenciesForBeanMap
在相关的bean名称之间映射：bean名称到bean依赖项的bean名称集
end note

class SimpleAliasRegistry{
-private Map<String, String> aliasMap = new ConcurrentHashMap<>(16)
}
AliasRegistry <|-- SimpleAliasRegistry
note top of SimpleAliasRegistry
接口AliasRegistry接口的简单实现
end note
note left of SimpleAliasRegistry::aliasMap
规范名称到别名的映射
end note

interface SingletonBeanRegistry{
+void registerSingleton(String beanName, Object singletonObject)
+Object getSingleton(String beanName)
+boolean containsSingleton(String beanName)
+String[] getSingletonNames()
+int getSingletonCount()
+Object getSingletonMutex()
}
note left of SingletonBeanRegistry
为共享bean实例定义的一个接口。通过org.springframework.beans.BeanFactory的实现，
以便以统一管理的方式公开其单例管理功能
end note
note right of SingletonBeanRegistry::registerSingleton
在注册表中注册一个给定的已存在的对象作为单例。
给定的实例应该被完全初始化；注册表不会执行任何初始化回调（特别是，它不会调用
InitializingBean的afterPropertiesSet方法）。这个实例也不会接受
任何销毁回调（例如DisposableBean的destroy方法）。
在完整的BeanFactory中运行时：如果bean应该接收初始化或销毁回调，请
注册一个bean definition,而不是现有实例。
通常，调用发生在注册配置时，但是也可以在运行时注册单例。因此，注册表实现
应该是同步的单例访问；如果它支持BeanFactory的单例延迟初始化，则无论如何
都应该这样做。
end note
note right of SingletonBeanRegistry::getSingleton
通过名称返回已注册的单例对象的原始类型。
只检查已经实例化的单例；对于还没有实例化的单例bean definition，不会返回该对象。
这个方法的主要目的是用来手动访问已注册的单例。也可以用于以原始方式访问
已创建的bean definition定义的单例。
注意：这个查找方法不能识别FactoryBean前缀或别名。应该在获取单例实例之前，
将其解析为规范的bean名称。
end note
note right of SingletonBeanRegistry::containsSingleton
通过指定名称，检查该注册表中是否存在该单例对象。
只能检查已经实例化的单例；如果单例bean还没有实例化，不会返回true。
这个方法的主要目的是用来手工检查已注册的单例。也可以用来检查通过bean
definition定义的单例是否已经被创建。
为了检查一个bean factory是否包含指定名称的bean 定义，请使用
ListableBeanFactory的containsBeanDefinition方法。调用
containsBeanDefinition和containsSingleton都会回答指定的bean
工厂是否包含给定名称的本地bean实例。
使用BeanFactory的containsBean方法通常为了检查该工厂是否知道
指定名称的bean(无论手动注册的单例实例或通过bean definition创建的)，
也可以用来检查祖先工厂。
注意：这个查找方法不能识别FactoryBean前缀或别名。应该在检查单例状态之前，
将其解析为规范的bean名称。
end note
note right of SingletonBeanRegistry::getSingletonNames
返回该注册表中已经注册的单例bean的名称。
只能检查已经实例化的单例；不能在还有实例化之前返回名称。
这个方法的主要目的是用来手动检查已经注册的单例。也可以用来检查祖先工厂已经创建的单例。
end note
note right of SingletonBeanRegistry::getSingletonCount()
返回此注册表中已经注册的单例数量。
只能用来检查已经实例化的单例；不能对还没有创建的单例进行计数。
end note
note right of SingletonBeanRegistry::getSingletonMutex
返回此注册表使用的单例互斥体（对于外部协作者）
end note

interface AliasRegistry{
   	void registerAlias(String name, String alias)
   	void removeAlias(String alias)
   	boolean isAlias(String name)
   	String[] getAliases(String name)
}
note top of AliasRegistry
管理别名的通用接口。是
org.springframework.beans.factory.support.BeanDefinitionRegistry
的超级接口
end note
note right of AliasRegistry::registerAlias
给定名称，为其注册一个别名
end note
note right of AliasRegistry::removeAlias
从注册表中删除指定的别名
end note
note right of AliasRegistry::isAlias
检查给定名称是否是别名
end note
note right of AliasRegistry::getAliases
返回给定名称的所有别名
end note

class AnnotatedBeanDefinitionReader{
  BeanDefinitionRegistry registry
  BeanNameGenerator beanNameGenerator
  ScopeMetadataResolver scopeMetadataResolver
  ConditionEvaluator conditionEvaluator
}
BeanDefinitionRegistry <-- AnnotatedBeanDefinitionReader
BeanNameGenerator <-- AnnotatedBeanDefinitionReader
AnnotationBeanNameGenerator <-- AnnotatedBeanDefinitionReader
ScopeMetadataResolver <-- AnnotatedBeanDefinitionReader
AnnotationScopeMetadataResolver <-- AnnotatedBeanDefinitionReader
ConditionEvaluator <-- AnnotatedBeanDefinitionReader

interface BeanDefinitionRegistry{
void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)
void removeBeanDefinition(String beanName)
BeanDefinition getBeanDefinition(String beanName)
boolean containsBeanDefinition(String beanName)
String[] getBeanDefinitionNames()
int getBeanDefinitionCount()
boolean isBeanNameInUse(String beanName)
}
note left of BeanDefinitionRegistry
包含bean definitions的注册表接口，例如RootBeanDefinition、
ChildBeanDefinition。通常由内部与AbstractBeanDefinition层次
结构一起工作的BeanFactories实现。例如：DefaultListableBeanFactory
实现了该接口。
end note
note right of BeanDefinitionRegistry::registerBeanDefinition
通过该注册表，注册一个新的bean definition。
必须支持RootBeanDefinition
和ChildBeanDefinition
end note
note right of BeanDefinitionRegistry::removeBeanDefinition
删除指定名称的bean definition
end note
note right of BeanDefinitionRegistry::getBeanDefinition
返回指定名称的BeanDefinition
end note
note right of BeanDefinitionRegistry::containsBeanDefinition
检查注册表是否包含指定名称的bean definition
end note
note right of BeanDefinitionRegistry::getBeanDefinitionNames
返回定义在该注册表中的所有bean的名字
end note
note right of BeanDefinitionRegistry::getBeanDefinitionCount
返回在注册表中定义的beans的数量
end note
note right of BeanDefinitionRegistry::isBeanNameInUse
确认在该注册表中，指定的bean 给定名称是否已经被使用
end note

interface AliasRegistry
AliasRegistry <|-- BeanDefinitionRegistry

interface BeanNameGenerator
class AnnotationBeanNameGenerator
BeanNameGenerator <|-- AnnotationBeanNameGenerator

interface ScopeMetadataResolver
class AnnotationScopeMetadataResolver
ScopeMetadataResolver <|-- AnnotationScopeMetadataResolver

class ClassPathBeanDefinitionScanner{
   BeanDefinitionRegistry registry
   BeanDefinitionDefaults beanDefinitionDefaults
   ScopeMetadataResolver scopeMetadataResolver
}
ClassPathScanningCandidateComponentProvider <|-- ClassPathBeanDefinitionScanner
BeanDefinitionRegistry <-- ClassPathBeanDefinitionScanner
BeanDefinitionDefaults <-- ClassPathBeanDefinitionScanner
ScopeMetadataResolver <-- ClassPathBeanDefinitionScanner
AnnotationScopeMetadataResolver <-- ClassPathBeanDefinitionScanner
BeanNameGenerator <-- ClassPathBeanDefinitionScanner
AnnotationBeanNameGenerator <-- ClassPathBeanDefinitionScanner

class BeanDefinitionDefaults

class ClassPathScanningCandidateComponentProvider{
    Environment environment
    ConditionEvaluator conditionEvaluator
}
ConditionEvaluator <.. ClassPathScanningCandidateComponentProvider
StandardEnvironment <.. ClassPathScanningCandidateComponentProvider
Environment <-- ClassPathScanningCandidateComponentProvider

class StandardEnvironment
AbstractEnvironment <|-- StandardEnvironment

abstract AbstractEnvironment
ConfigurableEnvironment <|-- AbstractEnvironment

interface ConfigurableEnvironment
Environment <|-- ConfigurableEnvironment
ConfigurablePropertyResolver <|-- ConfigurableEnvironment

interface Environment
PropertyResolver <|-- Environment

interface ConfigurablePropertyResolver
PropertyResolver <|-- ConfigurablePropertyResolver

interface PropertyResolver


note left of AnnotationConfigApplicationContext
独立的应用程序上下文，
接收component classes作为输入-
特别是@Configuration注解的类
也可以使用普通的@Component注解
类型以及使用javax.inject包下的，
符合JSR-330规范的类。
如果使用JSR-330规范的注解，
需要引入javax.inject库。

允许通过使用register(Class...)来注册
每个类，也允许使用scan(String...)的方式
来扫描类路径

在有多个@Configuration注解类的情况下，
最后一个类中定义的@Bean方法将会覆盖前面类
中定义的方法。可以利用此属性，通过一个额外的
@Configuration类来覆盖某些bean的定义。
end note

note left of AnnotatedBeanDefinitionReader
使用该类，可以方便的通过编程方式来注册bean classes。
它可以替代ClassPathBeanDefinitionScanner，使用
相同的注解解析方式，但却只能指定注册的类。
end note

note left of BeanNameGenerator
为bean definitions生成bean names的策略接口
end note

@enduml